name: Deploy Version

on:
  push:
    branches:
      - master

jobs:

  build-companion-android:
    name: Build Companion APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 13.x

      - name: Install Ionic
        run: npm install -g @ionic/cli

      - name: Install app dependencies
        working-directory: ./packages/companion
        run: npm install

      - name: Add Android platform
        working-directory: ./packages/companion
        run: ionic cordova platform add android@latest

      - name: Build Android Dev APK
        working-directory: ./packages/companion
        run: ionic cordova build android

      - name: Build Android Release APK
        working-directory: ./packages/companion
        run: ionic cordova build android --release --prod

      - name: Generate the Android App Bundle
        working-directory: ./packages/companion/platforms/android/
        run: ./gradlew bundle

      - name: Upload dev APK
        uses: actions/upload-artifact@v1
        with:
          name: app-dev
          path: platforms/android/app/build/outputs/apk/debug/app-debug.apk

      - name: Upload release bundle
        uses: actions/upload-artifact@v1
        with:
          name: app-release
          path: platforms/android/app/build/outputs/bundle/release/app.aab.x

  build-server:
    name: Build Server Docker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: npm install
        working-directory: packages/server
        run: |
          npm ci

      - name: Copy server
        run: |
          cp -r packages/server/{dist,serverless.yml} .
          ls -la

      # - name: serverless deploy
      #   uses: serverless/github-action@master
      #   with:
      #     args: deploy
      #   env:
      #     SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          # or if using AWS credentials directly
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}